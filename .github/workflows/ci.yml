name: Tests with Multiple Suites

on:
  push:
  
  pull_request:
    

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Create package.json if missing
      run: |
        if [ ! -f "package.json" ]; then
          echo '{
            "name": "test-project",
            "version": "1.0.0",
            "scripts": {
              "test": "jest",
              "test:unit": "jest tests/unit --passWithNoTests",
              "test:integration": "jest tests/integration --passWithNoTests",
              "test:e2e": "jest tests/e2e --passWithNoTests"
            },
            "devDependencies": {
              "jest": "^29.0.0",
              "jest-junit": "^16.0.0"
            }
          }' > package.json
        fi
    
    - name: Install dependencies
      run: npm install jest jest-junit --no-package-lock
    
    - name: Create test directories
      run: |
        mkdir -p tests/unit tests/integration tests/e2e test-results
        # Create sample test files if none exist
        if [ ! -f "tests/unit/sample.test.js" ]; then
          echo "describe('Sample test', () => { it('should pass', () => { expect(1 + 1).toBe(2); }); });" > tests/unit/sample.test.js
        fi
    
    - name: Run Unit Tests with JUnit output
      run: |
        npx jest tests/unit --ci --verbose \
          --reporters=jest-junit \
          --reporters=default \
          --testResultsProcessor="jest-junit" \
          --collectCoverage=false
      env:
        JEST_JUNIT_OUTPUT_DIR: "test-results"
        JEST_JUNIT_OUTPUT_NAME: "unit-results.xml"
      continue-on-error: true
    
    - name: Run Integration Tests with JUnit output
      run: |
        npx jest tests/integration --ci --verbose \
          --reporters=jest-junit \
          --reporters=default \
          --testResultsProcessor="jest-junit" \
          --collectCoverage=false
      env:
        JEST_JUNIT_OUTPUT_DIR: "test-results"
        JEST_JUNIT_OUTPUT_NAME: "integration-results.xml"
      continue-on-error: true
    
    - name: Run E2E Tests with JUnit output
      run: |
        npx jest tests/e2e --ci --verbose \
          --reporters=jest-junit \
          --reporters=default \
          --testResultsProcessor="jest-junit" \
          --collectCoverage=false
      env:
        JEST_JUNIT_OUTPUT_DIR: "test-results"
        JEST_JUNIT_OUTPUT_NAME: "e2e-results.xml"
      continue-on-error: true
    
    - name: List generated test files
      run: |
        echo "Generated test files:"
        ls -la test-results/ || echo "No test-results directory found"
        find . -name "*.xml" -type f | head -10 || echo "No XML files found"
    
    - name: Publish Test Reports
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: "Test Results (Node ${{ matrix.node-version }})"
        path: "test-results/*.xml"
        reporter: jest-junit
        fail-on-error: false
    
    - name: Upload test results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: test-results/
        retention-days: 7